
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/asset_download_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__auto_examples_asset_download_example.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_asset_download_example.py:


Asset Download Example
======================

This example demonstrates how to use the EarthDaily Python client v1
to download assets from STAC items.

Features demonstrated:
- Searching for STAC items
- Downloading specific assets
- Working with different asset access modes
- Progress monitoring during downloads
- Organizing downloaded files

Requirements:
- Set your EDS credentials as environment variables or in a .env file
- Install with platform support: pip install 'earthdaily[platform]'

.. GENERATED FROM PYTHON SOURCE LINES 19-315




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    üì• EarthDaily Asset Download Examples
    ============================================================

    This example demonstrates various asset download methods.
    Choose a demo to run:

    1. Basic asset download (visual assets)
    2. Advanced download configurations
    3. Multi-collection download
    4. Run all demos

    üí• Unexpected error in main: Cannot use input() builtin function in Sphinx-Gallery examples

    üí° Make sure you have set your EDS credentials as environment variables:
       EDS_CLIENT_ID, EDS_SECRET, EDS_AUTH_URL, EDS_API_URL






|

.. code-block:: Python


    from pathlib import Path

    # Load environment variables from .env file
    try:
        from dotenv import load_dotenv

        load_dotenv()
    except ImportError:
        print("üí° Consider installing python-dotenv to automatically load .env files:")
        print("   pip install python-dotenv")

    from earthdaily import EDSClient, EDSConfig
    from earthdaily._eds_config import AssetAccessMode
    from earthdaily.exceptions import EDSAPIError


    def initialize_client(asset_access_mode="presigned-urls"):
        """Initialize the EarthDaily API client with specified asset access mode."""
        print(f"üöÄ Initializing EarthDaily Client (Asset mode: {asset_access_mode})...")

        # Map string to enum
        mode_mapping = {"presigned-urls": AssetAccessMode.PRESIGNED_URLS, "proxy-urls": AssetAccessMode.PROXY_URLS}

        config = EDSConfig(asset_access_mode=mode_mapping.get(asset_access_mode, AssetAccessMode.PRESIGNED_URLS))
        client = EDSClient(config)
        print("‚úÖ Client initialized successfully!")
        return client


    def search_for_items(client, collection="sentinel-2-l2a", max_items=3):
        """Search for STAC items to download."""
        print(f"\nüîç Searching for {collection} items...")

        try:
            search_result = client.platform.pystac_client.search(
                collections=[collection],
                datetime="2024-06-01T00:00:00Z/2024-06-30T23:59:59Z",
                query={"eo:cloud_cover": {"lt": 10}},  # Low cloud cover
                max_items=max_items,
            )

            items = list(search_result.items())
            print(f"‚úÖ Found {len(items)} items with <10% cloud cover")

            for i, item in enumerate(items, 1):
                print(f"   {i}. {item.id}")
                print(f"      Date: {item.datetime}")
                print(f"      Cloud cover: {item.properties.get('eo:cloud_cover', 'N/A')}%")
                print(f"      Available assets: {len(item.assets)}")

            return items

        except EDSAPIError as e:
            print(f"‚ùå Error searching for items: {e}")
            return []
        except Exception as e:
            print(f"üí• Unexpected error: {e}")
            return []


    def show_available_assets(item):
        """Display available assets for a STAC item."""
        print(f"\nüì¶ Available assets for {item.id}:")

        # Group assets by type
        visual_assets = []
        spectral_assets = []
        metadata_assets = []

        for asset_name, asset in item.assets.items():
            media_type = getattr(asset, "media_type", "Unknown")
            if any(keyword in asset_name.lower() for keyword in ["visual", "thumbnail", "overview"]):
                visual_assets.append((asset_name, media_type))
            elif any(keyword in asset_name.lower() for keyword in ["red", "green", "blue", "nir", "swir"]):
                spectral_assets.append((asset_name, media_type))
            else:
                metadata_assets.append((asset_name, media_type))

        if visual_assets:
            print("   üì∏ Visual assets:")
            for name, media_type in visual_assets:
                print(f"      - {name} ({media_type})")

        if spectral_assets:
            print("   üåà Spectral assets:")
            for name, media_type in spectral_assets:
                print(f"      - {name} ({media_type})")

        if metadata_assets:
            print("   üìÑ Metadata assets:")
            for name, media_type in metadata_assets[:5]:  # Show first 5
                print(f"      - {name} ({media_type})")
            if len(metadata_assets) > 5:
                print(f"      ... and {len(metadata_assets) - 5} more metadata assets")


    def download_specific_assets(client, item, asset_keys, output_dir):
        """Download specific assets from a STAC item."""
        print(f"\n Downloading assets: {asset_keys}")
        print(f"   Item: {item.id}")
        print(f"   Output directory: {output_dir}")

        try:
            # Ensure output directory exists
            output_path = Path(output_dir)
            output_path.mkdir(parents=True, exist_ok=True)

            # Download assets
            client.platform.stac_item.download_assets(
                item=item,
                asset_keys=asset_keys,
                output_dir=output_path,
                max_workers=4,  # Parallel downloads
            )

            print("‚úÖ Assets downloaded successfully!")

            # List downloaded files
            downloaded_files = list(output_path.glob("*"))
            if downloaded_files:
                print("   Downloaded files:")
                for file in downloaded_files:
                    size_mb = file.stat().st_size / (1024 * 1024)
                    print(f"     - {file.name} ({size_mb:.1f} MB)")

            return True

        except Exception as e:
            print(f"‚ùå Error downloading assets: {e}")
            return False


    def download_by_item_string(client, item_string, asset_keys, output_dir):
        """Download assets using item string (collection/item_id format)."""
        print(f"\nüì• Downloading from item string: {item_string}")

        try:
            output_path = Path(output_dir)
            output_path.mkdir(parents=True, exist_ok=True)

            client.platform.stac_item.download_assets(
                item=item_string,
                asset_keys=asset_keys,
                output_dir=output_path,
                href_type="alternate.download.href",  # Use alternate download links
                max_workers=2,
            )

            print("‚úÖ Assets downloaded successfully using item string!")
            return True

        except Exception as e:
            print(f"‚ùå Error downloading with item string: {e}")
            return False


    def demo_basic_download():
        """Demonstrate basic asset downloading."""
        print("=" * 60)
        print("üì• DEMO: Basic Asset Download")
        print("=" * 60)

        # Initialize client
        client = initialize_client("presigned-urls")

        # Search for items
        items = search_for_items(client, "sentinel-2-l2a", 1)

        if not items:
            print("‚ùå No items found for download demo")
            return

        item = items[0]

        # Show available assets
        show_available_assets(item)

        # Download visual assets
        visual_assets = ["visual", "thumbnail"]
        available_visual = [asset for asset in visual_assets if asset in item.assets]

        if available_visual:
            output_dir = Path.home() / "Downloads" / "earthdaily_assets" / "basic_demo"
            success = download_specific_assets(client, item, available_visual, output_dir)

            if success:
                print("\n‚ú® Basic download demo completed!")
                print(f"üí° Check downloaded files in: {output_dir}")
        else:
            print("‚ùå No visual assets available for download")


    def demo_advanced_download():
        """Demonstrate advanced asset downloading with different configurations."""
        print("\n" + "=" * 60)
        print("üõ†Ô∏è  DEMO: Advanced Asset Download")
        print("=" * 60)

        print("\nThis demo shows different download configurations:")
        print("1. Proxy URLs vs Presigned URLs")
        print("2. Different asset types")
        print("3. Parallel downloads")

        # Compare different access modes
        for mode in ["presigned-urls", "proxy-urls"]:
            print(f"\n--- Testing {mode} ---")

            client = initialize_client(mode)
            items = search_for_items(client, "sentinel-2-l2a", 1)

            if items:
                item = items[0]

                # Download spectral assets
                spectral_assets = ["red", "green", "blue"]
                available_spectral = [asset for asset in spectral_assets if asset in item.assets]

                if available_spectral:
                    output_dir = Path.home() / "Downloads" / "earthdaily_assets" / f"advanced_demo_{mode}"
                    download_specific_assets(client, item, available_spectral[:2], output_dir)


    def demo_collection_download():
        """Demonstrate downloading from different collections."""
        print("\n" + "=" * 60)
        print("üåç DEMO: Multi-Collection Download")
        print("=" * 60)

        collections_to_try = ["sentinel-2-l2a", "landsat-c2l2-sr"]
        client = initialize_client()

        for collection in collections_to_try:
            print(f"\n--- Processing {collection} ---")

            items = search_for_items(client, collection, 1)

            if items:
                item = items[0]

                # Try to download thumbnail or visual asset
                preferred_assets = ["thumbnail", "visual", "overview"]
                available_assets = [asset for asset in preferred_assets if asset in item.assets]

                if available_assets:
                    output_dir = Path.home() / "Downloads" / "earthdaily_assets" / f"collection_demo_{collection}"
                    download_specific_assets(client, item, available_assets[:1], output_dir)
                else:
                    print(f"   No preferred assets available for {collection}")


    def main():
        """Main function to demonstrate asset download workflows."""
        try:
            print("üì• EarthDaily Asset Download Examples")
            print("=" * 60)
            print("\nThis example demonstrates various asset download methods.")
            print("Choose a demo to run:\n")
            print("1. Basic asset download (visual assets)")
            print("2. Advanced download configurations")
            print("3. Multi-collection download")
            print("4. Run all demos")

            choice = input("\nEnter your choice (1/2/3/4): ").strip()

            if choice == "1":
                demo_basic_download()
            elif choice == "2":
                demo_advanced_download()
            elif choice == "3":
                demo_collection_download()
            elif choice == "4":
                demo_basic_download()
                demo_advanced_download()
                demo_collection_download()
            else:
                print("‚ùå Invalid choice. Running basic demo by default...")
                demo_basic_download()

            print("\nüéâ Download examples completed!")
            print("üí° Downloaded files are organized in your Downloads/earthdaily_assets/ folder")

        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  Demo interrupted by user")
        except ImportError as e:
            print(f"\n‚ùå Import Error: {e}")
            print("üí° Make sure to install with platform support:")
            print("   pip install 'earthdaily[platform]'")
        except Exception as e:
            print(f"\nüí• Unexpected error in main: {e}")
            print("\nüí° Make sure you have set your EDS credentials as environment variables:")
            print("   EDS_CLIENT_ID, EDS_SECRET, EDS_AUTH_URL, EDS_API_URL")


    if __name__ == "__main__":
        main()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.004 seconds)


.. _sphx_glr_download__auto_examples_asset_download_example.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: asset_download_example.ipynb <asset_download_example.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: asset_download_example.py <asset_download_example.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: asset_download_example.zip <asset_download_example.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
