
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/quick_start.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__auto_examples_quick_start.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_quick_start.py:


Quick Start Example
====================

This example demonstrates how to use the EarthDaily Python client v1
to search for and work with STAC items.

Features demonstrated:
- Client initialization with environment variables
- Searching for STAC items
- Basic error handling
- Asset information access

Requirements:
- Set your EDS credentials as environment variables or in a .env file:
  EDS_CLIENT_ID, EDS_SECRET, EDS_AUTH_URL, EDS_API_URL

.. GENERATED FROM PYTHON SOURCE LINES 18-138




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    üöÄ Initializing EarthDaily Client...

    üí• Error in main workflow: Missing required fields: client_id (or EDS_CLIENT_ID), client_secret (or EDS_SECRET), token_url (or EDS_AUTH_URL)

    üí° Make sure you have set your EDS credentials as environment variables:
       EDS_CLIENT_ID, EDS_SECRET, EDS_AUTH_URL, EDS_API_URL






|

.. code-block:: Python


    # Load environment variables from .env file
    try:
        from dotenv import load_dotenv

        load_dotenv()
    except ImportError:
        print("üí° Consider installing python-dotenv to automatically load .env files:")
        print("   pip install python-dotenv")

    from earthdaily import EDSClient, EDSConfig
    from earthdaily.exceptions import EDSAPIError


    def initialize_client():
        """Initialize the EarthDaily API client with environment variables."""
        print("üöÄ Initializing EarthDaily Client...")

        # EDSConfig will automatically read from environment variables:
        # EDS_CLIENT_ID, EDS_SECRET, EDS_AUTH_URL, EDS_API_URL
        config = EDSConfig()
        client = EDSClient(config)

        print("‚úÖ Client initialized successfully!")
        return client


    def search_stac_items(client):
        """Search for STAC items using the platform API."""
        try:
            print("\nüîç Searching for Sentinel-2 L2A items...")

            # Search for recent Sentinel-2 items with cloud mask available
            search_result = client.platform.pystac_client.search(
                collections=["sentinel-2-l2a"],
                query={"eda:ag_cloud_mask_available": {"eq": True}},
                datetime="2024-06-01T00:00:00Z/2024-08-01T00:00:00Z",
                max_items=5,  # Limit results for demo
            )

            items = list(search_result.items())
            print(f"\nüåç Found {len(items)} STAC items:")

            for i, item in enumerate(items, 1):
                print(f"  {i}. {item.id}")
                print(f"     Date: {item.datetime}")
                print(f"     Cloud cover: {item.properties.get('eo:cloud_cover', 'N/A')}%")
                print(f"     Assets: {len(item.assets)} available")

                # Show some key assets
                key_assets = ["red", "green", "blue", "nir", "visual", "thumbnail"]
                available_key_assets = [asset for asset in key_assets if asset in item.assets]
                if available_key_assets:
                    print(f"     Key assets: {', '.join(available_key_assets)}")
                print()

            return items

        except EDSAPIError as e:
            print(f"\n‚ùå API error: {e}")
            print(f"   Status Code: {e.status_code}")
            print(f"   Details: {e.body}")
            return []
        except Exception as e:
            print(f"\nüí• Unexpected error while searching: {e}")
            return []


    def explore_item_details(item):
        """Explore details of a STAC item."""
        print(f"\nüîç Exploring item: {item.id}")
        print(f"   Collection: {item.collection_id}")
        print(f"   Geometry type: {item.geometry['type']}")
        print(f"   Bounding box: {item.bbox}")

        # Show properties
        print("\n   Key properties:")
        key_props = ["datetime", "eo:cloud_cover", "gsd", "platform", "constellation"]
        for prop in key_props:
            if prop in item.properties:
                print(f"     {prop}: {item.properties[prop]}")

        # Show available assets
        print(f"\n   Available assets ({len(item.assets)}):")
        for asset_name, asset in item.assets.items():
            print(f"     {asset_name}: {asset.media_type or 'Unknown type'}")
            if hasattr(asset, "extra_fields") and "gsd" in asset.extra_fields:
                print(f"       Resolution: {asset.extra_fields['gsd']}m")


    def main():
        """Main function to demonstrate the quick start workflow."""
        try:
            # Initialize client
            client = initialize_client()

            # Search for items
            items = search_stac_items(client)

            if items:
                # Explore the first item in detail
                explore_item_details(items[0])

                print("\n‚ú® Quick start completed successfully!")
                print(f"   Found {len(items)} items to work with.")
                print("   Try the other examples to learn about:")
                print("   - Creating datacubes (datacube_example.py)")
                print("   - Downloading assets (asset_download_example.py)")
                print("   - Bulk operations (bulk_search_example.py)")
            else:
                print("\n‚ùå No items found. Check your search parameters and try again.")

        except Exception as e:
            print(f"\nüí• Error in main workflow: {e}")
            print("\nüí° Make sure you have set your EDS credentials as environment variables:")
            print("   EDS_CLIENT_ID, EDS_SECRET, EDS_AUTH_URL, EDS_API_URL")


    if __name__ == "__main__":
        main()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.025 seconds)


.. _sphx_glr_download__auto_examples_quick_start.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: quick_start.ipynb <quick_start.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: quick_start.py <quick_start.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: quick_start.zip <quick_start.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
